pip:
  restore_cache: &pip_restore_cache
    keys:
      - pip-v1-{{ .Branch }}-{{ checksum "api/requirements-dev.txt" }}-{{ checksum "api/requirements.txt" }}
      - pip-v1-{{ .Branch }}-
      - pip-v1-

  install:  &pip_install
    name: Install pip packages
    command: |
      python3 -m venv ~/venv
      . ~/venv/bin/activate
      pip install -r api/requirements-dev.txt

  save_cache: &pip_save_cache
    key: pip-v1-{{ .Branch }}-{{ checksum "api/requirements-dev.txt" }}-{{ checksum "api/requirements.txt" }}
    paths:
      - ~/venv
npm:
  restore_cache: &npm_restore_cache
    keys:
      - npm-v2-{{ .Branch }}-{{ checksum "package.json" }}
      - npm-v2-{{ .Branch }}-
      - npm-v2-

  install: &npm_install
    name: Install npm modules
    command: npm install

  save_cache: &npm_save_cache
    key: npm-v2-{{ .Branch }}-{{ checksum "package.json" }}
    paths:
      - ./node_modules


version: 2.1
executors:
  pyton:
    docker:
      - image: circleci/python:3.6.3
    working_directory: ~/torii
  nodejs:
    docker:
      - image: circleci/node:10.14

jobs:
  python-test:
    executor: python
    steps:
      - checkout
      - restore_cache:
          <<: *pip_restore_cache
      - run:
          <<: *pip_install
      - save_cache:
          <<: *pip_save_cache
      - run:
          name: Run tests
          command: |
            . ~/venv/bin/activate
            cd ./api
            ./../.circleci/nosetests.sh tests
      - store_test_results:
          path: api/dist

  flake8:
    executor: python
    steps:
      - checkout
      - restore_cache:
          <<: *pip_restore_cache
      - run:
          <<: *pip_install
      - save_cache:
          <<: *pip_save_cache
      - run:
          name: Run flake8
          command: |
            . ~/venv/bin/activate
            flake8 ./api

  build-assets:
    executor: nodejs
    steps:
      - checkout
      - restore_cache:
          <<: *npm_restore_cache
      - run:
          <<: *npm_install
      - save_cache:
          <<: *npm_save_cache
      - run:
          name: Build
          command: npm run build:production
      - save_cache:
          key: build-assets-{{ .Branch }}-{{ .Revision }}
          paths:
            - ./dist

  deploy-assets:
    executor: python
    steps:
      - checkout
      - run:
          name: Install awscli
          command: |
            python3 -m venv ~/venv
            . ~/venv/bin/activate
            pip install awscli
      - restore_cache:
          key: build-assets-{{ .Branch }}-{{ .Revision }}
      - run:
          name: Send to S3
          command: |
            . ~/venv/bin/activate
            aws s3 cp index.html s3://torii-public/index.html
            aws s3 cp ./dist/app.js s3://torii-public/app.js
            aws s3 cp ./dist/app.css s3://torii-public/app.css

  deploy-api:
    executor: python
    steps:
      - checkout
      - run:
          name: Install pip packages
          command: |
            python3 -m venv ~/venv
            . ~/venv/bin/activate
            pip install -r api/requirements.txt
            pip install zappa==0.47.1
      - run:
          name: Deploy with Zappa
          command: |
            . ~/venv/bin/activate
            cd api/
            zappa update prod
      - run:
          name: Deploy with Zappa
          command: |
            . ~/venv/bin/activate
            cd api/
            zappa deploy prod
          when: on_fail

workflows:
  version: 2
  test-and-deploy:
    jobs:
      - python-test
      - flake8
      - build-assets:
          requires:
            - python-test
            - flake8
          filters:
            branches:
              only: production
      - approve:
          type: approval
          requires:
            - build-assets
          filters:
            branches:
              only: production
      - deploy-assets:
          context: shirakiya-IAM-CircleCI-user
          requires:
            - approve
          filters:
            branches:
              only: production
      - deploy-api:
          context: shirakiya-IAM-CircleCI-user
          requires:
            - approve
          filters:
            branches:
              only: production
